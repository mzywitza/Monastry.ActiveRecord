<?xml version="1.0" encoding="utf-8"?>
<report version="1.0">
  <metadata>
    <definitions>Mono 2.6</definitions>
    <momaversion>2.0.0.0</momaversion>
    <date>2011-07-06 22:25:42Z</date>
    <name />
    <email />
    <homepage />
    <organization />
    <comments />
    <apptype />
  </metadata>
  <assemblies>
    <assembly name="Castle.Core.dll" version="2.5.1.0" runtime="2.0" todo="4" niex="1" miss="0" pinv="0">
      <issue type="todo">
        <class>XPathAdapter</class>
        <caller>void WriteSimple(XPathResult, Object, IDictionaryAdapter)</caller>
        <method>void SetTypedValue(Object)</method>
        <raw>System.Void System.Xml.XPath.XPathNavigator::SetTypedValue(System.Object)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>XPathAdapter</class>
        <caller>void WriteSimple(XPathResult, Object, IDictionaryAdapter)</caller>
        <method>void SetTypedValue(Object)</method>
        <raw>System.Void System.Xml.XPath.XPathNavigator::SetTypedValue(System.Object)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>bool SourceExists(string, string)</method>
        <raw>System.Boolean System.Diagnostics.EventLog::SourceExists(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="niex">
        <class>SlimReadWriteLock</class>
        <caller>void .ctor()</caller>
        <method>void .ctor(LockRecursionPolicy)</method>
        <raw>System.Void System.Threading.ReaderWriterLockSlim::.ctor(System.Threading.LockRecursionPolicy)</raw>
      </issue>
    </assembly>
    <assembly name="Castle.Windsor.dll" version="2.5.1.0" runtime="2.0" todo="1" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>RemotingFacility</class>
        <caller>void SetUpRemotingConfiguration()</caller>
        <method>void Configure(string, bool)</method>
        <raw>System.Void System.Runtime.Remoting.RemotingConfiguration::Configure(System.String,System.Boolean)</raw>
        <data>Implement ensureSecurity</data>
      </issue>
    </assembly>
    <assembly name="Iesi.Collections.dll" version="1.0.1.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Monastry.ActiveRecord.dll" version="4.0.0.15" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Monastry.ActiveRecord.NHibernate.dll" version="4.0.0.15" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="NHibernate.dll" version="3.2.0.3001" runtime="2.0" todo="7" niex="16" miss="0" pinv="0">
      <issue type="todo">
        <class>EmitUtil</class>
        <caller>void EmitCreateDelegateInstance(ILGenerator, Type, MethodInfo)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>ConnectionProvider</class>
        <caller>string GetNamedConnectionString(String, String&gt;)</caller>
        <method>ConnectionStringSettingsCollection get_ConnectionStrings()</method>
        <raw>System.Configuration.ConnectionStringSettingsCollection System.Configuration.ConfigurationManager::get_ConnectionStrings()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistributedTransactionFactory</class>
        <caller>void EnlistInDistributedTransactionIfNeeded(ISessionImplementor)</caller>
        <method>Enlistment EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)</method>
        <raw>System.Transactions.Enlistment System.Transactions.Transaction::EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)</raw>
        <data>EnlistmentOptions being ignored</data>
      </issue>
      <issue type="todo">
        <class>BasicPropertyAccessor/BasicGetter</class>
        <caller>void Emit(ILGenerator)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>BasicPropertyAccessor/BasicSetter</class>
        <caller>void Emit(ILGenerator)</caller>
        <method>void EmitCall(OpCode, MethodInfo, Type[])</method>
        <raw>System.Void System.Reflection.Emit.ILGenerator::EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])</raw>
        <data>vararg methods are not supported</data>
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistributedTransactionFactory/DistributedTransactionContext</class>
        <caller>void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)</caller>
        <method>void Prepared()</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::Prepared()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>AdoNetWithDistributedTransactionFactory/DistributedTransactionContext</class>
        <caller>void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)</caller>
        <method>void ForceRollback(Exception)</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::ForceRollback(System.Exception)</raw>
        <data />
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AbstractDataBaseSchema</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>OracleDataBaseSchema</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetTables(string, string, string, String[])</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetIndexInfo(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetIndexColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetColumns(string, string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SybaseAnywhereDataBaseMetaData</class>
        <caller>DataTable GetForeignKeys(string, string, string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>AdoNetWithDistributedTransactionFactory/&lt;&gt;c__DisplayClass1</class>
        <caller>void &lt;EnlistInDistributedTransactionIfNeeded&gt;b__0(Object, TransactionEventArgs)</caller>
        <method>Transaction get_Transaction()</method>
        <raw>System.Transactions.Transaction System.Transactions.TransactionEventArgs::get_Transaction()</raw>
      </issue>
    </assembly>
    <assembly name="pnunit.framework.dll" version="1.0.4109.34242" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="System.Data.SQLite.DLL" version="1.0.66.0" runtime="2.0" todo="3" niex="8" miss="0" pinv="81">
      <issue type="todo">
        <class>SQLiteConnectionStringBuilder</class>
        <caller>void Initialize(string)</caller>
        <method>void GetProperties(Hashtable)</method>
        <raw>System.Void System.Data.Common.DbConnectionStringBuilder::GetProperties(System.Collections.Hashtable)</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>SQLiteEnlistment</class>
        <caller>void Prepare(PreparingEnlistment)</caller>
        <method>void Prepared()</method>
        <raw>System.Void System.Transactions.PreparingEnlistment::Prepared()</raw>
        <data />
      </issue>
      <issue type="todo">
        <class>SQLiteEnlistment</class>
        <caller>void .ctor(Transaction)</caller>
        <method>Enlistment EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)</method>
        <raw>System.Transactions.Enlistment System.Transactions.Transaction::EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)</raw>
        <data>EnlistmentOptions being ignored</data>
      </issue>
      <issue type="niex">
        <class>SQLiteConnectionStringBuilder</class>
        <caller>void Initialize(string)</caller>
        <method>void GetProperties(Hashtable)</method>
        <raw>System.Void System.Data.Common.DbConnectionStringBuilder::GetProperties(System.Collections.Hashtable)</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteConnection</class>
        <caller>DataTable GetSchema()</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteConnection</class>
        <caller>DataTable GetSchema(string)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteDataReader</class>
        <caller>DataTable GetSchemaTable(bool, bool)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteDataReader</class>
        <caller>DataTable GetSchemaTable(bool, bool)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteKeyReader</class>
        <caller>void .ctor(SQLiteDataReader, SQLiteStatement)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteKeyReader</class>
        <caller>void .ctor(SQLiteDataReader, SQLiteStatement)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="niex">
        <class>SQLiteKeyReader</class>
        <caller>void .ctor(SQLiteDataReader, SQLiteStatement)</caller>
        <method>DataTable GetSchema(string, String[])</method>
        <raw>System.Data.DataTable System.Data.Common.DbConnection::GetSchema(System.String,System.String[])</raw>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>string SQLiteLastError(SQLiteConnectionHandle)</caller>
        <method>IntPtr sqlite3_errmsg_interop(IntPtr, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_errmsg_interop(System.IntPtr,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>void FinalizeStatement(SQLiteStatementHandle)</caller>
        <method>int sqlite3_finalize_interop(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_finalize_interop(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>void CloseConnection(SQLiteConnectionHandle)</caller>
        <method>int sqlite3_close_interop(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_close_interop(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>void ResetConnection(SQLiteConnectionHandle)</caller>
        <method>IntPtr sqlite3_next_stmt(IntPtr, IntPtr)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_next_stmt(System.IntPtr,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>void ResetConnection(SQLiteConnectionHandle)</caller>
        <method>int sqlite3_reset_interop(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_reset_interop(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>void ResetConnection(SQLiteConnectionHandle)</caller>
        <method>int sqlite3_exec(IntPtr, Byte[], IntPtr, IntPtr, IntPtr&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_exec(System.IntPtr,System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLiteBase</class>
        <caller>bool IsAutocommit(SQLiteConnectionHandle)</caller>
        <method>int sqlite3_get_autocommit(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_get_autocommit(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Cancel()</caller>
        <method>void sqlite3_interrupt(IntPtr)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_interrupt(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string get_SQLiteVersion()</caller>
        <method>IntPtr sqlite3_libversion()</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_libversion()</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int get_Changes()</caller>
        <method>int sqlite3_changes(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_changes(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Open(string, SQLiteOpenFlagsEnum, int, bool)</caller>
        <method>int sqlite3_open_interop(Byte[], int, IntPtr&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_open_interop(System.Byte[],System.Int32,System.IntPtr&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void SetTimeout(int)</caller>
        <method>int sqlite3_busy_timeout(IntPtr, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_busy_timeout(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>bool Step(SQLiteStatement)</caller>
        <method>int sqlite3_step(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_step(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int Reset(SQLiteStatement)</caller>
        <method>int sqlite3_reset_interop(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_reset_interop(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>SQLiteStatement Prepare(DbCommandBuilder), string, SQLiteStatement, uint, String&amp;)</caller>
        <method>int sqlite3_prepare_interop(IntPtr, IntPtr, int, IntPtr&amp;, IntPtr&amp;, Int32&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_prepare_interop(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr&amp;,System.IntPtr&amp;,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Double(SQLiteStatement, int, double)</caller>
        <method>int sqlite3_bind_double(IntPtr, int, double)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_double(System.IntPtr,System.Int32,System.Double)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Int32(SQLiteStatement, int, int)</caller>
        <method>int sqlite3_bind_int(IntPtr, int, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_int(System.IntPtr,System.Int32,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Int64(SQLiteStatement, int, Int64)</caller>
        <method>int sqlite3_bind_int64(IntPtr, int, Int64)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_int64(System.IntPtr,System.Int32,System.Int64)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Text(SQLiteStatement, int, string)</caller>
        <method>int sqlite3_bind_text(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_text(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_DateTime(SQLiteStatement, int, DateTime)</caller>
        <method>int sqlite3_bind_text(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_text(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Blob(SQLiteStatement, int, Byte[])</caller>
        <method>int sqlite3_bind_blob(IntPtr, int, Byte[], int, IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_blob(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void Bind_Null(SQLiteStatement, int)</caller>
        <method>int sqlite3_bind_null(IntPtr, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_null(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int Bind_ParamCount(SQLiteStatement)</caller>
        <method>int sqlite3_bind_parameter_count(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_parameter_count(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string Bind_ParamName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_bind_parameter_name_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_parameter_name_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int Bind_ParamIndex(SQLiteStatement, string)</caller>
        <method>int sqlite3_bind_parameter_index(IntPtr, Byte[])</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_parameter_index(System.IntPtr,System.Byte[])</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int ColumnCount(SQLiteStatement)</caller>
        <method>int sqlite3_column_count(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_count(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string ColumnName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_name_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_name_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>TypeAffinity ColumnAffinity(SQLiteStatement, int)</caller>
        <method>TypeAffinity sqlite3_column_type(IntPtr, int)</method>
        <raw>System.Data.SQLite.TypeAffinity System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_type(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string ColumnType(SQLiteStatement, int, TypeAffinity&amp;)</caller>
        <method>IntPtr sqlite3_column_decltype_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_decltype_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string ColumnOriginalName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_origin_name_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_origin_name_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string ColumnDatabaseName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_database_name_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_database_name_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string ColumnTableName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_table_name_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_table_name_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ColumnMetaData(string, string, string, String&amp;, String&amp;, Boolean&amp;, Boolean&amp;, Boolean&amp;)</caller>
        <method>int sqlite3_table_column_metadata_interop(IntPtr, Byte[], Byte[], Byte[], IntPtr&amp;, IntPtr&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;, Int32&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_table_column_metadata_interop(System.IntPtr,System.Byte[],System.Byte[],System.Byte[],System.IntPtr&amp;,System.IntPtr&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>double GetDouble(SQLiteStatement, int)</caller>
        <method>double sqlite3_column_double(IntPtr, int)</method>
        <raw>System.Double System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_double(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int GetInt32(SQLiteStatement, int)</caller>
        <method>int sqlite3_column_int(IntPtr, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_int(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetInt64(SQLiteStatement, int)</caller>
        <method>Int64 sqlite3_column_int64(IntPtr, int)</method>
        <raw>System.Int64 System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_int64(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string GetText(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_text_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_text_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>DateTime GetDateTime(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_text_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_text_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetBytes(SQLiteStatement, int, int, Byte[], int, int)</caller>
        <method>int sqlite3_column_bytes(IntPtr, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_bytes(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetBytes(SQLiteStatement, int, int, Byte[], int, int)</caller>
        <method>IntPtr sqlite3_column_blob(IntPtr, int)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_blob(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int AggregateCount(IntPtr)</caller>
        <method>int sqlite3_aggregate_count(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_aggregate_count(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void CreateFunction(string, int, bool, SQLiteCallback, SQLiteCallback, SQLiteFinalCallback)</caller>
        <method>int sqlite3_create_function_interop(IntPtr, Byte[], int, int, IntPtr, SQLiteCallback, SQLiteCallback, SQLiteFinalCallback, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_create_function_interop(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback,System.Data.SQLite.SQLiteCallback,System.Data.SQLite.SQLiteFinalCallback,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void CreateFunction(string, int, bool, SQLiteCallback, SQLiteCallback, SQLiteFinalCallback)</caller>
        <method>int sqlite3_create_function_interop(IntPtr, Byte[], int, int, IntPtr, SQLiteCallback, SQLiteCallback, SQLiteFinalCallback, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_create_function_interop(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback,System.Data.SQLite.SQLiteCallback,System.Data.SQLite.SQLiteFinalCallback,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void CreateCollation(string, SQLiteCollation, SQLiteCollation)</caller>
        <method>int sqlite3_create_collation(IntPtr, Byte[], int, IntPtr, SQLiteCollation)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_create_collation(System.IntPtr,System.Byte[],System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCollation)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void CreateCollation(string, SQLiteCollation, SQLiteCollation)</caller>
        <method>int sqlite3_create_collation(IntPtr, Byte[], int, IntPtr, SQLiteCollation)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_create_collation(System.IntPtr,System.Byte[],System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCollation)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int ContextCollateCompare(CollationEncodingEnum, IntPtr, string, string)</caller>
        <method>int sqlite3_context_collcompare(IntPtr, Byte[], int, Byte[], int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_context_collcompare(System.IntPtr,System.Byte[],System.Int32,System.Byte[],System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int ContextCollateCompare(CollationEncodingEnum, IntPtr, Char[], Char[])</caller>
        <method>int sqlite3_context_collcompare(IntPtr, Byte[], int, Byte[], int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_context_collcompare(System.IntPtr,System.Byte[],System.Int32,System.Byte[],System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>CollationSequence GetCollationSequence(SQLiteFunction, IntPtr)</caller>
        <method>IntPtr sqlite3_context_collseq(IntPtr, Int32&amp;, Int32&amp;, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_context_collseq(System.IntPtr,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetParamValueBytes(IntPtr, int, Byte[], int, int)</caller>
        <method>int sqlite3_value_bytes(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_bytes(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetParamValueBytes(IntPtr, int, Byte[], int, int)</caller>
        <method>IntPtr sqlite3_value_blob(IntPtr)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_blob(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>double GetParamValueDouble(IntPtr)</caller>
        <method>double sqlite3_value_double(IntPtr)</method>
        <raw>System.Double System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_double(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int GetParamValueInt32(IntPtr)</caller>
        <method>int sqlite3_value_int(IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_int(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetParamValueInt64(IntPtr)</caller>
        <method>Int64 sqlite3_value_int64(IntPtr)</method>
        <raw>System.Int64 System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_int64(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>string GetParamValueText(IntPtr)</caller>
        <method>IntPtr sqlite3_value_text_interop(IntPtr, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_text_interop(System.IntPtr,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>TypeAffinity GetParamValueType(IntPtr)</caller>
        <method>TypeAffinity sqlite3_value_type(IntPtr)</method>
        <raw>System.Data.SQLite.TypeAffinity System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_type(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnBlob(IntPtr, Byte[])</caller>
        <method>void sqlite3_result_blob(IntPtr, Byte[], int, IntPtr)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_blob(System.IntPtr,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnDouble(IntPtr, double)</caller>
        <method>void sqlite3_result_double(IntPtr, double)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_double(System.IntPtr,System.Double)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnError(IntPtr, string)</caller>
        <method>void sqlite3_result_error(IntPtr, Byte[], int)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_error(System.IntPtr,System.Byte[],System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnInt32(IntPtr, int)</caller>
        <method>void sqlite3_result_int(IntPtr, int)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_int(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnInt64(IntPtr, Int64)</caller>
        <method>void sqlite3_result_int64(IntPtr, Int64)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_int64(System.IntPtr,System.Int64)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnNull(IntPtr)</caller>
        <method>void sqlite3_result_null(IntPtr)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_null(System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ReturnText(IntPtr, string)</caller>
        <method>void sqlite3_result_text(IntPtr, Byte[], int, IntPtr)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_text(System.IntPtr,System.Byte[],System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>IntPtr AggregateContext(IntPtr)</caller>
        <method>IntPtr sqlite3_aggregate_context(IntPtr, int)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_aggregate_context(System.IntPtr,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void SetPassword(Byte[])</caller>
        <method>int sqlite3_key(IntPtr, Byte[], int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_key(System.IntPtr,System.Byte[],System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void ChangePassword(Byte[])</caller>
        <method>int sqlite3_rekey(IntPtr, Byte[], int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_rekey(System.IntPtr,System.Byte[],System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void SetUpdateHook(SQLiteUpdateCallback)</caller>
        <method>IntPtr sqlite3_update_hook(IntPtr, SQLiteUpdateCallback, IntPtr)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_update_hook(System.IntPtr,System.Data.SQLite.SQLiteUpdateCallback,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void SetCommitHook(SQLiteCommitCallback)</caller>
        <method>IntPtr sqlite3_commit_hook(IntPtr, SQLiteCommitCallback, IntPtr)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_commit_hook(System.IntPtr,System.Data.SQLite.SQLiteCommitCallback,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void SetRollbackHook(SQLiteRollbackCallback)</caller>
        <method>IntPtr sqlite3_rollback_hook(IntPtr, SQLiteRollbackCallback, IntPtr)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_rollback_hook(System.IntPtr,System.Data.SQLite.SQLiteRollbackCallback,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>int GetCursorForTable(SQLiteStatement, int, int)</caller>
        <method>int sqlite3_table_cursor(IntPtr, int, int)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_table_cursor(System.IntPtr,System.Int32,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>Int64 GetRowIdForCursor(SQLiteStatement, int)</caller>
        <method>int sqlite3_cursor_rowid(IntPtr, int, Int64&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_cursor_rowid(System.IntPtr,System.Int32,System.Int64&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3</class>
        <caller>void GetIndexColumnExtendedInfo(string, string, string, Int32&amp;, Int32&amp;, String&amp;)</caller>
        <method>int sqlite3_index_column_info_interop(IntPtr, Byte[], Byte[], Byte[], Int32&amp;, Int32&amp;, IntPtr&amp;, Int32&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_index_column_info_interop(System.IntPtr,System.Byte[],System.Byte[],System.Byte[],System.Int32&amp;,System.Int32&amp;,System.IntPtr&amp;,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>void Open(string, SQLiteOpenFlagsEnum, int, bool)</caller>
        <method>int sqlite3_open16_interop(Byte[], int, IntPtr&amp;)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_open16_interop(System.Byte[],System.Int32,System.IntPtr&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>void Bind_Text(SQLiteStatement, int, string)</caller>
        <method>int sqlite3_bind_text16(IntPtr, int, string, int, IntPtr)</method>
        <raw>System.Int32 System.Data.SQLite.UnsafeNativeMethods::sqlite3_bind_text16(System.IntPtr,System.Int32,System.String,System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string ColumnName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_name16_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_name16_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string GetText(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_text16_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_text16_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string ColumnOriginalName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_origin_name16_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_origin_name16_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string ColumnDatabaseName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_database_name16_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_database_name16_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string ColumnTableName(SQLiteStatement, int)</caller>
        <method>IntPtr sqlite3_column_table_name16_interop(IntPtr, int, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_column_table_name16_interop(System.IntPtr,System.Int32,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>string GetParamValueText(IntPtr)</caller>
        <method>IntPtr sqlite3_value_text16_interop(IntPtr, Int32&amp;)</method>
        <raw>System.IntPtr System.Data.SQLite.UnsafeNativeMethods::sqlite3_value_text16_interop(System.IntPtr,System.Int32&amp;)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>void ReturnError(IntPtr, string)</caller>
        <method>void sqlite3_result_error16(IntPtr, string, int)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_error16(System.IntPtr,System.String,System.Int32)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
      <issue type="pinv">
        <class>SQLite3_UTF16</class>
        <caller>void ReturnText(IntPtr, string)</caller>
        <method>void sqlite3_result_text16(IntPtr, string, int, IntPtr)</method>
        <raw>System.Void System.Data.SQLite.UnsafeNativeMethods::sqlite3_result_text16(System.IntPtr,System.String,System.Int32,System.IntPtr)</raw>
        <data>System.Data.SQLite.DLL</data>
      </issue>
    </assembly>
  </assemblies>
</report>